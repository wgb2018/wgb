<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.microdev.mapper.TaskWorkerMapper">
    <sql id="TaskWorker_Query_List">
    id as pid, create_time, deleted, modify_time,
    confirmed_date, have_pay_money, minutes, no_promise, refused_reason, repast_times,
    settled, settled_date, should_pay_money, status, worker_id, task_hr_id, user_id, user_name,hourly_pay,hr_company_name,hotel_name, check_sign,
        hotel_id,from_date,to_date,day_start_time,day_end_time,task_type_code,task_type_text,task_content,hr_company_id,hotel_task_id
</sql>
    <select id="findFirstById" resultType="com.microdev.model.TaskWorker" parameterType="java.lang.String">
        select
        <include refid="TaskWorker_Query_List"/>
        from task_worker where id = #{taskWorkerId}
    </select>

    <update id="updateByPrimaryKey" parameterType="java.util.Map">
        update task_worker
        <set>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="refusedReason != null and refusedReason != ''">
                refused_reason = #{refusedReason},
            </if>
            <if test="noPromise != null">
                no_promise = #{noPromise},
            </if>
            <if test="settled != null">
                settled = #{settled},
            </if>
            <if test="settledDate != null">
                settled_date = #{settledDate},
            </if>
            <if test="minutes != null">
                minutes = #{minutes},
            </if>
            <if test="shouldPayMoney != null">
                should_pay_money = #{shouldPayMoney},
            </if>
            <if test="havePayMoney != null">
                have_pay_money = #{havePayMoney},
            </if>
            <if test="checkSign != null">
                check_sign = #{checkSign},
            </if>
        </set>
        where id = #{pid}
    </update>

    <update id="update" parameterType="com.microdev.model.TaskWorker">
        update task_worker set deleted = #{deleted},modify_time = #{modifyTime},confirmed_date = #{confirmedDate},
        from_date = #{from_date},have_pay_money = #{havePayMoney},minutes = #{minutes},no_promise = #{noPromise},
        refused_reason = #{refusedReason},repast_times = #{repastTimes},settled = #{settled},settled_date = #{settledDate},
        should_pay_money = #{shouldPayMoney},status = #{status},to_date = #{toDate},worker_id = #{workerId},task_hr_id = #{taskHrId},user_id =
        #{userId},day_start_time = #{dayStartTime},day_end_time = #{dayEndTime},user_name = #{userName},hourly_pay = #{hourlyPay},hr_company_name =
        #{hrCompanyName},hotel_name = #{hotelName} where id = #{pid}
    </update>
    <insert id="save" parameterType="com.microdev.model.TaskWorker">
        insert into task_worker
        values(#{pid},#{createTime},#{deleted},#{modifyTime},#{confirmedDate},#{fromDate},
        #{havePayMoney},#{minutes},#{noPromise},#{refusedReason},#{repastTimes},#{settled},#{settledDate},#{shouldayMoney},
        #{status},#{toDate},#{workerd},#{taskHrId},#{userId},#{dayStartTime},#{dayEndTime},#{userName},#{hourlyPay}, #{hrCompanyName},#{hotelName},#{checkSign})
    </insert>
    <select id="findWorkerNowTask" resultType="com.microdev.model.TaskWorker">
        select
        <include refid="TaskWorker_Query_List"/>
        from task_worker
        where user_id = #{userId} and status = 1 and to_date &gt;= #{nowTime} and from_date &lt;= #{nowTime}
        and day_start_time &lt;= #{time} and day_end_time &gt;={timeA}
        and deleted = 0
        order by create_time desc limit 1
    </select>
    <select id="findWorkerNextTask" resultType="com.microdev.model.TaskWorker">
        select
        <include refid="TaskWorker_Query_List"/>
        from task_worker
        where user_id = #{userId} and status = 1 and to_date &gt;= #{nowTime} and from_date &lt;= #{nowTime}
        and day_start_time &gt;= #{time}
        and deleted = 0
        order by from_date asc limit 1
    </select>
    <select id="findWorkerBeforeTask" resultType="com.microdev.model.TaskWorker">
        select
        <include refid="TaskWorker_Query_List"/>
        from task_worker
        where user_id = #{userId} and status = 1 and to_date &lt;= #{nowTime,jdbcType=TIMESTAMP} and deleted = 0
        order by to_date desc limit 1
    </select>
    <update id="addMinutes">
        UPDATE task_worker SET minutes = minutes + #{minutes}, should_pay_money = should_pay_money + #{shouldPayMoney} Where id = #{taskWorkerId}
    </update>
    <update id="updateStatus">
        update task_worker set status = #{status} where id = #{workerTaskId}
    </update>
    <select id="findByUserId" resultType="com.microdev.model.TaskWorker" parameterType="java.lang.String">
        select
        <include refid="TaskWorker_Query_List"/>
        from task_worker
        where user_id = #{userId}
    </select>
    <select id="findAll" parameterType="com.microdev.param.TaskWorkerQuery" resultType="com.microdev.model.TaskWorker">
        select
        <include refid="TaskWorker_Query_List"/>
        from task_worker
        <where>
            <if test="workerId != null || workerId !=''">
                worker_id = #{workerId}
            </if>
            <if test="taskStatus != null || taskStatus !=''">
                <if test="taskStatus &lt; 3">
                   and  status = #{taskStatus}
                </if>
                <if test="taskStatus == 3">
                    and to_date &gt;= now() and from_date &lt;= now()
                </if>
                <if test="taskStatus == 4">
                    and to_date &lt; now()
                </if>
            </if>
            <if test="payStatus != null || payStatus !=''">
                <if test="payStatus == 1">
                    and have_pay_money == 0
                </if>
                <if test="payStatus == 2">
                    and have_pay_money &gt;= 0 and should_pay_money != have_pay_money
                </if>
                <if test="payStatus == 3">
                    and have_pay_money &gt;= 0 and should_pay_money = have_pay_money
                </if>
            </if>
        </where> order by create_time desc
    </select>
    <select id="findByHrTaskId" resultType="com.microdev.model.TaskWorker">
        select
        <include refid="TaskWorker_Query_List"/>
        from task_worker
        where task_hr_id =#{HrTaskId}
    </select>
    <select id="queryHrCompanyBill" resultType="com.microdev.model.TaskWorker" parameterType="com.microdev.param.BillRequest">
        select  sum(w.should_pay_money) as should_pay_money,sum(w.have_pay_money) as have_pay_money,sum(w.minutes) as minutes,sum(w.should_pay_money) - sum(w.have_pay_money) as paidPayMpney,
        w.user_id,w.user_name from task_worker w left join task_hr_company h on w.task_hr_id = h.id
        where h.hr_company_id = #{id} group by w.user_id,w.user_name
        <if test = "name != null and name != ''">
            and user_name = #{name}
        </if>
    </select>
    <select id="queryWorkerBill" resultType="com.microdev.model.TaskHrCompany" parameterType="com.microdev.param.BillRequest">
        select  sum(w.should_pay_money) as should_pay_money,sum(w.have_pay_money) as have_pay_money,sum(w.minutes) as minutes,
        h.hr_company_id,h.hr_company_name from task_worker w left join task_hr_company h on w.task_hr_id = h.id
        where w.user_id = #{id} group by h.hr_company_id,h.hr_company_name
        <if test = "name != null and name != ''">
            and hr_company_name = #{name}
        </if>
    </select>
    <select id="selectHrId" parameterType="java.lang.String" resultType="java.util.Map">
        SELECT th.`hotel_id` AS hotelId, th.`hr_company_id` AS hrCompanyId, tw.`hotel_name` AS hotelName,th.id as hrTaskId,th.task_id as taskId
        FROM task_worker tw
        INNER JOIN task_hr_company th
        ON tw.`task_hr_id` = th.`id`
        WHERE tw.id = #{taskWorkerId}
    </select>
    <select id="selectUserAndWorkerId" parameterType="java.lang.String" resultType="com.microdev.param.WorkerCancelTask">
        SELECT tw.`worker_id` AS workerId, u.`id` AS userId, u.`nickname` AS username, th.hotel_id AS hotelId,
        th.hr_company_id as hrId,tw.hotel_task_id as hotelTaskId,task_hr_id as taskHrId,th.task_id as taskId,tw.day_start_time,tw.day_end_time
        FROM (SELECT * FROM task_worker WHERE id = #{id})tw
        INNER JOIN USER u ON tw.`user_id` = u.`id`
        INNER JOIN task_hr_company th ON th.id = tw.task_hr_id
    </select>
    <select id="selectTaskWorkById" parameterType="java.lang.String" resultType="java.util.Map">
        SELECT u.worker_id AS workerId, u.`nickname` AS workerName, CASE u.`sex` WHEN 'MALE' THEN 'MALE' WHEN 'FEMALE' THEN 'FEMALE' ELSE 'UNKNOWN' END AS gender,
        IFNULL(u.avatar, '') AS headImage,u.mobile AS mobile, u.birthday AS birthday,tw.refused_reason as refusedReason,
        tw.refused_reason AS refusedReason,tw.status AS taskStatus,tw.repast_times AS repastTimes, tw.minutes AS minutes,
        IFNULL(tw.have_pay_money,0) AS havePayMoney, IFNULL(tw.should_pay_money,0) AS shouldPayMoney, IFNULL(tw.should_pay_money - tw.have_pay_money,0) AS waitPayMoney,
        tw.id AS taskWorkerId
        FROM (
        SELECT * FROM task_worker
        WHERE `task_hr_id` = #{taskHrId}
        ) tw
        INNER JOIN USER u
        ON tw.`user_id` = u.`id`
    </select>

    <select id="selectTaskWorkCById" parameterType="java.lang.String" resultType="java.util.Map">
        SELECT u.worker_id AS workerId, u.`nickname` AS workerName, CASE u.`sex` WHEN 'MALE' THEN 'MALE' WHEN 'FEMALE' THEN 'FEMALE' ELSE 'UNKNOWN' END AS gender,
        IFNULL(u.avatar, '') AS headImage,u.mobile AS mobile, u.birthday AS birthday,tw.refused_reason as refusedReason,u.age as age,
        tw.refused_reason AS refusedReason,tw.status AS taskStatus,tw.repast_times AS repastTimes, tw.minutes AS minutes,
        IFNULL(tw.have_pay_money,0) AS havePayMoney, IFNULL(tw.should_pay_money,0) AS shouldPayMoney, IFNULL(tw.should_pay_money - tw.have_pay_money,0) AS waitPayMoney,
        tw.id AS taskWorkerId
        FROM (
        SELECT * FROM task_worker
        WHERE `task_hr_id` = #{taskHrId} and (status = 1 or status = 3)
        ) tw
        INNER JOIN USER u
        ON tw.`user_id` = u.`id`
    </select>

    <select id="selectUnreadCount" parameterType="java.lang.String" resultType="java.lang.Integer">
        SELECT COUNT(1) FROM task_worker WHERE user_id = #{userId} AND check_sign = 0
    </select>

    <select id="selectCompleteCount" parameterType="java.lang.String" resultType="java.lang.Integer">
        SELECT COUNT(1) FROM task_worker WHERE worker_id = #{workerId} AND CURDATE() > to_date and check_sign <![CDATA[<>]]> 3
    </select>

    <select id="selectWorkerUnreadCount" resultType="java.lang.Integer">
      SELECT COUNT(1) FROM task_worker
WHERE check_sign = 0 AND DATE(to_date) >= DATE(NOW()) AND worker_id = #{workerId}
    </select>
</mapper>