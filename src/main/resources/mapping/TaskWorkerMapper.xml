<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.microdev.mapper.TaskWorkerMapper" >
    <sql id="TaskWorker_Query_List" >
    id as pid, create_time, deleted, modify_time,
    confirmed_date, from_date, have_pay_money, minutes, no_promise, refused_reason, repast_times,
    settled, settled_date, should_pay_money, status, to_date, worker_id, task_hr_id, user_id, day_start_time, day_end_time, user_name,hourly_pay,hr_company_name,hotel_name
</sql>
    <select id="findFirstById" resultType="com.microdev.model.TaskWorker">
        select <include refid="TaskWorker_Query_List"/> from task_worker where id = #{taskWorkerId}
    </select>
    <update id="update" parameterType="com.microdev.model.TaskWorker">
        update task_worker set deleted = #{deleted},modify_time = #{modifyTime},confirmed_date = #{confirmedDate},
        from_date = #{from_date},have_pay_money = #{havePayMoney},minutes = #{minutes},no_promise = #{noPromise},
        refused_reason = #{refusedReason},repast_times = #{repastTimes},settled = #{settled},settled_date = #{settledDate},
        should_pay_money = #{shouldPayMoney},status = #{status},to_date = #{toDate},worker_id = #{workerId},task_hr_id = #{taskHrId},user_id =
        #{userId},day_start_time = #{dayStartTime},day_end_time = #{dayEndTime},user_name = #{userName},hourly_pay = #{hourlyPay},hr_company_name =
        #{hrCompanyName},hotel_name = #{hotelName} where id = #{id}
    </update>
    <insert id="save" parameterType="com.microdev.model.TaskWorker">
        insert into task_worker
        values(#{id},#{createTime},#{deleted},#{modifyTime},#{confirmedDate},#{fromDate},
        #{havePayMoney},#{minutes},#{noPromise},#{refusedReason},#{repastTimes},#{settled},#{settledDate},#{shouldayMoney},
        #{status},#{toDate},#{workerd},#{taskHrId},#{userId},#{dayStartTime},#{dayEndTime},#{userName},#{hourlyPay},
        #{hrCompanyName},#{hotelName})
    </insert>
    <select id="findWorkerNowTask" resultType="com.microdev.model.TaskWorker">
        select <include refid="TaskWorker_Query_List"/> from task_worker
        where user_id = #{userId} and status = #{status} and to_date &gt;= #{nowTime,jdbcType=TIMESTAMP}
        and day_start_time &lt;=  #{Time,jdbcType=TIMESTAMP} and day_end_time &gt;=  #{Time,jdbcType=TIMESTAMP} and delete = 0
        order by create_time desc limit 1
    </select>
    <select id="findWorkerNextTask" resultType="com.microdev.model.TaskWorker">
        select <include refid="TaskWorker_Query_List"/> from task_worker
        where user_id = #{userId} and status = #{status} and from_date &gt;= #{nowTime,jdbcType=TIMESTAMP} and delete = 0
        order by from_date asc limit 1
    </select>
    <select id="findWorkerBeforeTask" resultType="com.microdev.model.TaskWorker">
        select <include refid="TaskWorker_Query_List"/> from task_worker
        where user_id = #{userId} and status = #{status} and to_date &lt;= #{nowTime,jdbcType=TIMESTAMP} and delete = 0
        order by to_date desc limit 1
    </select>
    <update id="addMinutes">
        UPDATE task_worker SET minutes = minutes + #{minutes}, should_pay_money = should_pay_money + #{shouldPayMoney} Where id = #{taskWorkerId}
    </update>
    <select id="findByUserId" resultType="com.microdev.model.TaskWorker">
        select <include refid="TaskWorker_Query_List"/> from task_worker
        where user_id = #{userId}
    </select>
    <select id="findAll" parameterType="com.microdev.param.TaskWorkerQuery" resultType="com.microdev.model.TaskWorker">
        select <include refid="TaskWorker_Query_List"/> from task_worker
        <where>
            <if test="userId != null || userId !=''">
                user_id = #{userId}
            </if>
            <if test="taskStatus != null || taskStatus !=''">
                <if test="taskStatus &lt; 3">
                    task_status = #{taskStatus}
                </if>
                <if test="taskStatus == 3">
                    and to_date &gt;= now() and from_date &lt;= now()
                </if>
                <if test="taskStatus == 4">
                    and to_date &lt; now()
                </if>
            </if>
            <if test="payStatus != null || payStatus !=''">
                <if test="payStatus == 1">
                    and have_pay_money == 0
                </if>
                <if test="payStatus == 2">
                    and have_pay_money &gt;= 0 and should_pay_money != have_pay_money
                </if>
                <if test="payStatus == 3">
                    and have_pay_money &gt;= 0 and should_pay_money = have_pay_money
                </if>
            </if>
        </where> order by create_time desc
    </select>
    <select id="findByHrTaskId" resultType="com.microdev.model.TaskWorker">
        select <include refid="TaskWorker_Query_List"/> from task_worker
        where task_hr_id =#{HrTaskId}
    </select>
    <select id="queryHrCompanyBill" resultType="com.microdev.model.TaskWorker">
        select  sum(w.should_pay_money) as should_pay_money,sum(w.have_pay_money) as have_pay_money,
        w.user_id,w.user_name from task_worker w left jion task_hr_company h on w.task_hr_id = h.id
        where h.hr_company_id = #{hrCompanyId} group by w.user_id,w.user_name
    </select>
    <select id="queryWorkerBill" resultType="com.microdev.model.TaskWorker">
        select  sum(w.should_pay_money) as should_pay_money,sum(w.have_pay_money) as have_pay_money,
        h.hr_company_id,h.hr_company_name from task_worker w left jion task_hr_company h on w.task_hr_id = h.id
        where w.user_id = #{userId} group by h.hr_company_id,h.hr_company_name
    </select>
    <select id="selectHrId" parameterType="java.lang.String" resultType="java.util.Map">
        SELECT th.`hotel_id` AS hotelId, th.`hr_company_id` AS hrCompanyId, tw.`hotel_name` AS hotelName
        FROM task_worker tw
        INNER JOIN task_hr_company th
        ON tw.`task_hr_id` = th.`id`
        WHERE tw.id = #{taskWorkerId}
    </select>
    <select id="selectUserAndWorkerId" parameterType="java.lang.String" resultType="java.util.Map">
        SELECT tw.`worker_id` AS workerId, u.`id` AS userId, u.`username` AS username
        FROM task_worker tw
        INNER JOIN USER u
        ON tw.`user_id` = u.`id`
        WHERE tw.id= #{id}
    </select>
    <select id="selectTaskWorkById" parameterType="java.lang.String" resultType="java.util.Map">
        SELECT u.`id` AS workerId, u.`nickname` AS workerName, CASE u.`sex` WHEN 'MALE' THEN '男' WHEN 'FEMALE' THEN '女' ELSE '未知' END AS Gender,
        IFNULL(u.avatar, '') AS headImage,u.mobile AS mobile, u.birthday AS birthday,
        tw.refused_reason AS refusedReason,tw.status AS taskStatus,tw.repast_times AS repastTimes, tw.minutes AS minutes,
        IFNULL(tw.have_pay_money,0) AS havePayMoney, IFNULL(tw.should_pay_money,0) AS shouldPayMoney, IFNULL(tw.should_pay_money - tw.have_pay_money,0) AS waitPayMoney,
        tw.id AS taskWorkerId
        FROM (
        SELECT * FROM task_worker
        WHERE `task_hr_id` = #{taskHrId}
        ) tw
        INNER JOIN USER u
        ON tw.`user_id` = u.`id`
    </select>
</mapper>